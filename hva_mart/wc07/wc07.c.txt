~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Opdracht 7.c lookuptable
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Een lookuptable bevat antwoorden van een berekening die voor meerdere 
indexwaarden al is uitgerekend. Door het uitrekenen van tevoren al te doen 
kan een hoofdberekening minder kloktikken kosten. Er zijn twee mogelijke 
momenten van uitrekenen:

* Broncode (compiletime): de lookuptable is al uitgerekend en als array in de 
broncode geplaatst en zal hierdoor worden gecompileerd om deel te worden van 
het programma zelf.
* Uitvoering (runtime): de lookuptable kan ook aan het begin van de 
uitvoering van het programma eenmalig worden gegenereerd.

NB: het is belangrijk te realiseren dat het rekenen met kommagetallen, zoals 
float en double, meer kloktikken kost dan rekenen met gehele getallen. 
Gebruik daarom kommagetallen beperkt en bewust. 

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Hardware 
* Laptop
* Raspberry Pi

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Software 
*	Via ssh-sessie: gcc
*	Via ssh-sessie: g++
*	Via ssh-sessie: nano, vi, … 
*	Via drive-mapping: Notepad++, Visual Code, …
*	Aantal TODO’s: 4

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Folders en bestanden:
07.c/lookuptable.cpp                                               aangeleverd
07.c/lookuptable.hpp                                               aangeleverd
07.c/mijnsinus.cpp                                                 aangeleverd
07.c/mijnsinus.hpp                                                 aangeleverd
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~



lookuptable.cpp
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
// 7.c lookuptable
//
// g++ -Wall -o lookuptable lookuptable.cpp mijnsinus.cpp
// ./lookuptable

//TODO: zorg voor de juiste include

int main(int nArgc, char* aArgv[]) {

  // Initialiseren
  printf("7.c lookuptable\n\n");
  //TODO: zorg dat de sinus 20 x stappen en 10 y stappen groot is
  Mijnsinus oSinus();

  // Toon de gegenereerde sinus
  for (uint16_t i = 0; i < oSinus.aantalX(); i++) {
    printf("%4d ", oSinus[i]);
  };

  // Afsluiten
  printf("\nAfgesloten :-)\n\n");

  return 0;
};



lookuptable.hpp
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
// 7.c lookuptable

#ifndef _LOOKUPTABLE_HPP_
#define _LOOKUPTABLE_HPP_

  #include <stdbool.h>
  #include <stdio.h>
  #include <string.h>
  //TODO: zorg voor de include die nanosleep() bevat
  #include "mijnsinus.hpp"

  // Maak #define voor handige delay-functie in msec
  #define thread_delay(nMSec) \
  { \
    struct timespec oTime, oTimeLeft; \
    oTime.tv_sec = 0; \
    oTime.tv_nsec = (nMSec) * 1000000L; \
    nanosleep(&oTime, &oTimeLeft); \
  };

#endif // _LOOKUPTABLE_HPP_



mijnsinus.cpp
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
// 7.c lookuptable

#include "mijnsinus.hpp"

Mijnsinus::Mijnsinus(uint16_t nAantalX, uint16_t nAantalY, uint8_t nDecimalen) {

  uint16_t i;
  double fSchaalX = M_PI * 2.0 / (double)nAantalX;
  double fSchaalY = nAantalY;
  double fDecimalen = 1.0;

  // Onthoud de instellingen en alloceer het geheugen
  nAantalX_ = nAantalX;
  nAantalY_ = nAantalY;
  pBuffer_ = new int16_t[nAantalX_];
  
  // Bepaal de decimalen factor
  for (i = 0; i < nDecimalen; i++) {
    fDecimalen *= 10.0;
  };

  // Vul de buffer met de sinus waarden
  for (i = 0; i < nAantalX_; i++) {
    // 2*Pi => nAantalX
    pBuffer_[i] = fSchaalY * sin(fSchaalX * i) * fDecimalen;
  };
};

Mijnsinus::~Mijnsinus() {

  // Geheugen vrijgeven
  delete[] pBuffer_;
};

uint16_t Mijnsinus::aantalX() {

  return nAantalX_;
};

int16_t Mijnsinus::operator[](uint16_t nIndex) {

  return pBuffer_[nIndex];
};



mijnsinus.hpp
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
// 7.c lookuptable

#ifndef _MIJNSINUS_HPP_
#define _MIJNSINUS_HPP_

  #include <stdbool.h>
  #include <stdio.h>
  #include <stdint.h>
  #include <string.h>
  #include <math.h>

  // De lut sinus class
  class Mijnsinus {
    public:
      Mijnsinus(uint16_t nAantalX, uint16_t nAantalY, uint8_t nDecimalen = 3);
      ~Mijnsinus();
      uint16_t aantalX();
      //TODO: voek de [] operator toe

    private:
      uint16_t nAantalX_;
      uint16_t nAantalY_;
      int16_t *pBuffer_;
  };

#endif // _MIJNSINUS_HPP_